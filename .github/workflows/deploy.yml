name: Deploy to Cloud Run

on:
  push:
    branches: ["master"]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.CLOUD_RUN_REGION }}
  SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  REPOSITORY: ${{ secrets.ARTIFACT_REPO }}
  IMAGE: ${{ secrets.CLOUD_RUN_SERVICE }}
  IMAGE_URI: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/${{ secrets.CLOUD_RUN_SERVICE }}:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: prod
    env:
      # Expose auth secrets to env for conditional checks
      WIF_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      SA_EMAIL: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check auth configuration
        run: |
          if [ -z "${WIF_PROVIDER}" ] && [ -z "${GCP_SA_KEY}" ]; then
            echo "::error::Missing auth configuration. Set either (WORKLOAD_IDENTITY_PROVIDER and SERVICE_ACCOUNT_EMAIL) for WIF or GCP_SA_KEY for key auth in repo secrets." && exit 1
          fi

      - name: Authenticate to Google Cloud (WIF)
        if: env.WIF_PROVIDER != ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA_EMAIL }}

      - name: Authenticate to Google Cloud (Service Account Key)
        if: env.WIF_PROVIDER == ''
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 463.0.0'

      - name: Enable required APIs
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com sqladmin.googleapis.com --project "$PROJECT_ID"

      - name: Configure Docker auth for Artifact Registry
        run: |
          gcloud auth configure-docker "$REGION-docker.pkg.dev" --quiet

      - name: Build Docker image
        run: |
          docker build -t "$IMAGE_URI" .

      - name: Push image
        run: |
          docker push "$IMAGE_URI"

      - name: Deploy to Cloud Run
        env:
          CLOUD_SQL_INSTANCE: ${{ secrets.CLOUD_SQL_INSTANCE }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          INGEST_ON_START: ${{ secrets.INGEST_ON_START }}
          INGEST_GDRIVE_URL: ${{ secrets.INGEST_GDRIVE_URL }}
          INGEST_GLOB: ${{ secrets.INGEST_GLOB }}
        run: |
          # Deploy and attach Cloud SQL; pass env vars
          gcloud run deploy "$SERVICE" \
            --project "$PROJECT_ID" \
            --region "$REGION" \
            --platform managed \
            --image "$IMAGE_URI" \
            --allow-unauthenticated \
            --add-cloudsql-instances "$CLOUD_SQL_INSTANCE" \
            --set-env-vars "DJANGO_DEBUG=0,USE_GUNICORN=1,DB_HOST=/cloudsql/$CLOUD_SQL_INSTANCE,DB_NAME=$DB_NAME,DB_USER=$DB_USER,DB_PASSWORD=$DB_PASSWORD,DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY,ALLOWED_HOSTS=$ALLOWED_HOSTS,INGEST_ON_START=$INGEST_ON_START,INGEST_GDRIVE_URL=$INGEST_GDRIVE_URL,INGEST_GLOB=$INGEST_GLOB"
